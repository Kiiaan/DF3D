---
 ######## Registration paramteres ########
 # where the microscope 3D data is stored
 dir_data_raw: "/media/NAS4/Chien-Ju/BICCN_DART-FISH/20220331/0_Raw/"

 # where the maximum projected data is stored
 proj_dir: "../2_Projected/"

 # where the registered data is stored
 reg_dir: "../1_Registered/"

 # list of all rounds to be registered
 reg_rounds: ["anchor", "dc0", "dc1", "dc2", "dc3", "dc4", "dc5", "dc6", "dc7", "draq5"]

 # reference cycle for registration 
 ref_reg_cycle: "dc5" 

 # where the microscope metadata is. Set to null if metadata is here: dir_data_raw/ref_reg_cycle/MetaData/ref_reg_cycle.xml
 metadata_file: "/media/NAS4/Chien-Ju/BICCN_DART-FISH/20220331/0_Raw/dc5/MetaData/20220331_dc5.xml"

 # number of iterations for registration
 reg_maxIter: 250

 # number of resolutions for image pyramid, typically 5
 NumberOfResolutions: 5
 
 # the type of transformation for registration: translation, rigid, affine
 reg_transform: 'affine'

 # if scale of the transformation parameters are estimated. If false, then params_scales needs to be set
 AutomaticScaleEstimation: true

 # only used if AutomaticScaleEstimation==false. Sets the relative scale of rotation parameters vs translation
 params_scales: ['20000'] # None

 # pre-mipping smoothing method. Either "gaussian" or "median"
 smooth_method: median

 # sigma if smooth_method=="gaussian", window size if smooth_method=="median"
 smooth_degree: 2

 # channel for registration on all cycles except those specified in `cycle_other`
 ref_reg_ch: "ch01" # DIC channel for reference cycle
 
 # A dictionary. Keys are the names of the cycles that are different from the ref cycle. Values are the channel used for registration
 cycle_other: {} # example: {"9_DRAQ5" : "ch00"}
 
 # number of parallel jobs for registration
 reg_npool: 5

 # number of parallel jobs for maximum intensity projection
 mip_npool: 10

 # Skip maximum intensity projection (for troubleshooting)
 skip_mip: false

 # two channel rounds: list of rounds that only have ch00 and ch01
 twoChannelRounds: ["draq5"]

 # the regex for the file names of the raw files
 filePat3d: "20220331_(?P<rndName>\\S+)?_(?P<fov>s\\d+)_(?P<z>z\\d+)_(?P<ch>ch\\d+)\\S*.tif$" # 0: all, 1: rnd, 2:fov, 3: z, 4: ch

 

 ######## Background subtraction paramteres ########
 # if there is a background cycle to subtract from all other cycles
 background_subtraction: false

 # background cycles names. Doesn't matter if `background_subtraction` is false. 
 background_cycles: ["4_Empty"]

 # where to write background subtraction results. 
 background_subt_dir: "../2_Registered/Background_subtracted/"

 # channels to do background subtraction on
 subtraction_channels: ['ch00', 'ch02', 'ch03']



 ######## Stitching paramteres ########
 # where stitching results are saved 
 stitch_dir: "../2_Projected/stitched/"

 # rounds to be stitched. Has to be compatible with `reg_rounds`. If null, `reg_rounds` will be used.
 stch_rounds: null

 # the round to be used as the reference for stitching. if null, uses `ref_reg_cycle`
 stitchRefCycle: null # or "5_dc3"

 # default reference channel for stitching, if null uses ref_reg_ch
 stitchChRef: null # or "ch01"

 # Image-j path
 ij_path: "/media/Home_Raid1_Voyager/kian/Codes/DART-FISH/image_stitching/Fiji.app/ImageJ-linux64"

 # the regex pattern with the file names
 stchFilePattern: "REG_20220331_(?P<rndName>\\S+)?_(?P<fov>FOV\\d+)_(?P<ch>ch\\d+)\\S*.tif$" # 0: all, 1:dc/DRAQ, 2: FOV, 3: ch
 
 # the regex pattern for fov names
 fov_pat: "FOV(\\d+)" # pattern to extract the fov# 

 # the background image for the fov map: [round, channel]
 fovMap_bg : ["anchor", "ch03"]




 ######## Decoding paramteres ########
 # where decoding results will be stored + prefix
 dc_out: "../3_Decoded/"

 # If true the deconvoltion will be done in 3d. Current implementation projects the deconved weights and does 2d segmentation
 deconv3d: false

 # path to codebook
 codebook_path: "_codebook/cj484+24empty.txt"

 # rounds for decoding. The order has to match the codebook
 dc_rounds: ["dc0", "dc1", "dc2", "dc3", "dc4", "dc5", "dc6", "dc7"]

 # the suffix to be appended to the end of all output files
 dc_suff: ""
 
 # the mapping between codes, i.e. [1, 2, 3] to channels
 channel_order: ['ch02', 'ch00', 'ch03']

 # minimum (l2) norm for pixel intensities to be decoded
 min_dc_norm: 0.3 

 # lasso regularization parameter
 lasso_reg_value: 0.02 

 # thresholds for elbow-point detection, applied to the OLS weights. First value corresponds to the highest weight, second value to the 2nd highest weight
 elbow_thresholds: [0.2, 0.15]

 # the hard threshold on the deconvoled weights from the OLS model
 deconv_weight_threshold: 0.1 

 # number of iterations for channel coefficient estimation. 0 to skip 
 chan_coef_niter: 3 

 # if list, name of fovs to use for channel coef estimation. If int, number of fovs to sample
 chan_coef_fovs: 5

 # fraction of pixels to sample from each fov to estimate channel coefficients
 chan_coef_frac: 0.015

 # intensities are scaled such that values higher than this are set to 255. "max" scales the maximum to be 255.
 max_intensity: "max" # 255

 # intensities below this value are set to 0
 min_intensity: 1

 # number of pools for decoding
 dc_npool: 5



 ######## Combining FOV's paramteres ########
 # Cutoff on the probability of spots being empty. Spots above this value are filtered out
 emptyProbabilityThr: "infer" # 0.3

 # radius in pixels for removing rolonies in overlapping boundaries
 overlapRemovalRadius: 4.5

 # fraction of spots per field of view to be used for training the empty classifier (a random forest)
 distance_nn_frac: 0.3
 
 # n_estimator parameter for the random forest model. See sklearn's documentation for RandomForestClassifier
 randomForest_nEstimators: 100

 # max_depth parameter for the random forest model. See sklearn's documentation for RandomForestClassifier
 randomForest_maxDepth: 4
 

 ######## Segmentation paramteres ########
 # where the segmentation and assignment files are saved
 seg_dir: "../4_CellAssignment"

 # name of the model to use. String (for built-in models) or full path to the model (e.g., custom model)
 pretrained_model: "nuclei" # "cyto" # "CP"

 # segmentation type for Cellpose. Options: 
 #  1) "nuc": only nuclei, 2) "cyto": only cytoplasm, 
 #  3) "nuc+cyto": cytoplasm segmentation with aid from nuclear stain
 segmentation_type: "nuc"

 # the round name that contains nuclear stain. Doesn't matter if segmentation_type == 'cyto'
 nuc_rnd : "draq5" 

 # channel for nuclear stain in `nuc_rnd`. Doesn't matter if segmentation_type == 'cyto'
 nuc_ch: "ch00"

 # the round name that contains cytoplasmic stain. Doesn't matter if segmentation_type == 'nuc'
 cyto_rnd : "10_anchor_redo"

 # channel for cyto stain in `cyto_rnd`. Doesn't matter if segmentation_type == 'nuc'
 cyto_ch: "ch03"

 # flow_threshold parameter of cellpose. Increase if many missing cells, decrease if too many spurious cells. Default 0.4
 flow_threshold: 0.8 # 0.4

 # average diameter of cells (for "cyto" and "nuc+cyto") or nuclei (for "nuc") in pixels
 seg_diam: 30

 # suffix for generated files. Could be "".
 seg_suf: "_nuc"
 
 # whether to skip the segmentation. For troubleshooting
 skip_seg: false

 # number of cores for finding centroids
 centroid_npool: 10

 # maximum acceptable distance of rolonies to their closest cell in pixels
 max_rol2nuc_dist: 150



 ######## QC paramteres ########
 # where the qc files will be stored
 qc_dir : "../5_Analysis" 

 # name of anchor round 
 anc_rnd: "0_anchor"

 # anchor channel, where all rolonies are on
 anc_ch: "ch00"
 
